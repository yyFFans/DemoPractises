<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">


<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    
    <title>Command Line Interface &#8212; Flask Documentation (0.12)</title>
    
    <link rel="stylesheet" href="../_static/flask.css" type="text/css" />
    <link rel="stylesheet" href="../_static/pygments.css" type="text/css" />
    
    <script type="text/javascript">
      var DOCUMENTATION_OPTIONS = {
        URL_ROOT:    '../',
        VERSION:     '0.12',
        COLLAPSE_INDEX: false,
        FILE_SUFFIX: '',
        HAS_SOURCE:  true,
        SOURCELINK_SUFFIX: '.txt'
      };
    </script>
    <script type="text/javascript" src="../_static/jquery.js"></script>
    <script type="text/javascript" src="../_static/underscore.js"></script>
    <script type="text/javascript" src="../_static/doctools.js"></script>
    <link rel="index" title="Index" href="../genindex/" />
    <link rel="search" title="Search" href="../search/" />
    <link rel="next" title="Development Server" href="../server/" />
    <link rel="prev" title="Flask Extensions" href="../extensions/" />
   
  
    
  
  <link rel="canonical" href="../../latest/cli/">
  <link media="only screen and (max-device-width: 480px)" href="../_static/small.css" type= "text/css" rel="stylesheet" />

  </head>
  <body role="document">
  
  

    <div class="related" role="navigation" aria-label="related navigation">
      <h3>Navigation</h3>
      <ul>
        <li class="right" style="margin-right: 10px">
          <a href="../genindex/" title="General Index"
             accesskey="I">index</a></li>
        <li class="right" >
          <a href="../server/" title="Development Server"
             accesskey="N">next</a> |</li>
        <li class="right" >
          <a href="../extensions/" title="Flask Extensions"
             accesskey="P">previous</a> |</li>
        <li class="nav-item nav-item-0"><a href="../">Flask Documentation (0.12)</a> &#187;</li> 
      </ul>
    </div>  

    <div class="document">
  
  
      <div class="documentwrapper">
        <div class="bodywrapper">
          <div class="body" role="main">
            
  <div class="section" id="command-line-interface">
<span id="cli"></span><h1>Command Line Interface<a class="headerlink" href="#command-line-interface" title="Permalink to this headline">¶</a></h1>
<div class="versionadded">
<p><span class="versionmodified">New in version 0.11.</span></p>
</div>
<p>One of the nice new features in Flask 0.11 is the built-in integration of
the <a class="reference external" href="http://click.pocoo.org/">click</a> command line interface.  This
enables a wide range of new features for the Flask ecosystem and your own
applications.</p>
<div class="section" id="basic-usage">
<h2>Basic Usage<a class="headerlink" href="#basic-usage" title="Permalink to this headline">¶</a></h2>
<p>After installation of Flask you will now find a <strong class="command">flask</strong> script
installed into your virtualenv.  If you don&#8217;t want to install Flask or you
have a special use-case you can also use <code class="docutils literal"><span class="pre">python</span> <span class="pre">-m</span> <span class="pre">flask</span></code> to accomplish
exactly the same.</p>
<p>The way this script works is by providing access to all the commands on
your Flask application&#8217;s <a class="reference internal" href="../api/#flask.Flask.cli" title="flask.Flask.cli"><code class="xref py py-attr docutils literal"><span class="pre">Flask.cli</span></code></a> instance as well as some
built-in commands that are always there.  Flask extensions can also
register more commands there if they desire so.</p>
<p>For the <strong class="command">flask</strong> script to work, an application needs to be
discovered.  This is achieved by exporting the <code class="docutils literal"><span class="pre">FLASK_APP</span></code> environment
variable.  It can be either set to an import path or to a filename of a
Python module that contains a Flask application.</p>
<p>In that imported file the name of the app needs to be called <code class="docutils literal"><span class="pre">app</span></code> or
optionally be specified after a colon.  For instance
<code class="docutils literal"><span class="pre">mymodule:application</span></code> would tell it to use the <cite>application</cite> object in
the <code class="file docutils literal"><span class="pre">mymodule.py</span></code> file.</p>
<p>Given a <code class="file docutils literal"><span class="pre">hello.py</span></code> file with the application in it named <code class="docutils literal"><span class="pre">app</span></code>
this is how it can be run.</p>
<p>Environment variables (On Windows use <code class="docutils literal"><span class="pre">set</span></code> instead of <code class="docutils literal"><span class="pre">export</span></code>):</p>
<div class="highlight-default"><div class="highlight"><pre><span></span><span class="n">export</span> <span class="n">FLASK_APP</span><span class="o">=</span><span class="n">hello</span>
<span class="n">flask</span> <span class="n">run</span>
</pre></div>
</div>
<p>Or with a filename:</p>
<div class="highlight-default"><div class="highlight"><pre><span></span><span class="n">export</span> <span class="n">FLASK_APP</span><span class="o">=/</span><span class="n">path</span><span class="o">/</span><span class="n">to</span><span class="o">/</span><span class="n">hello</span><span class="o">.</span><span class="n">py</span>
<span class="n">flask</span> <span class="n">run</span>
</pre></div>
</div>
</div>
<div class="section" id="virtualenv-integration">
<h2>Virtualenv Integration<a class="headerlink" href="#virtualenv-integration" title="Permalink to this headline">¶</a></h2>
<p>If you are constantly working with a virtualenv you can also put the
<code class="docutils literal"><span class="pre">export</span> <span class="pre">FLASK_APP</span></code> into your <code class="docutils literal"><span class="pre">activate</span></code> script by adding it to the
bottom of the file.  That way every time you activate your virtualenv you
automatically also activate the correct application name.</p>
</div>
<div class="section" id="debug-flag">
<h2>Debug Flag<a class="headerlink" href="#debug-flag" title="Permalink to this headline">¶</a></h2>
<p>The <strong class="command">flask</strong> script can also be instructed to enable the debug
mode of the application automatically by exporting <code class="docutils literal"><span class="pre">FLASK_DEBUG</span></code>.  If
set to <code class="docutils literal"><span class="pre">1</span></code> debug is enabled or <code class="docutils literal"><span class="pre">0</span></code> disables it:</p>
<div class="highlight-default"><div class="highlight"><pre><span></span><span class="n">export</span> <span class="n">FLASK_DEBUG</span><span class="o">=</span><span class="mi">1</span>
</pre></div>
</div>
</div>
<div class="section" id="running-a-shell">
<h2>Running a Shell<a class="headerlink" href="#running-a-shell" title="Permalink to this headline">¶</a></h2>
<p>To run an interactive Python shell you can use the <code class="docutils literal"><span class="pre">shell</span></code> command:</p>
<div class="highlight-default"><div class="highlight"><pre><span></span><span class="n">flask</span> <span class="n">shell</span>
</pre></div>
</div>
<p>This will start up an interactive Python shell, setup the correct
application context and setup the local variables in the shell.  This is
done by invoking the <a class="reference internal" href="../api/#flask.Flask.make_shell_context" title="flask.Flask.make_shell_context"><code class="xref py py-meth docutils literal"><span class="pre">Flask.make_shell_context()</span></code></a> method of the
application.  By default you have access to your <code class="docutils literal"><span class="pre">app</span></code> and <a class="reference internal" href="../api/#flask.g" title="flask.g"><code class="xref py py-data docutils literal"><span class="pre">g</span></code></a>.</p>
</div>
<div class="section" id="custom-commands">
<h2>Custom Commands<a class="headerlink" href="#custom-commands" title="Permalink to this headline">¶</a></h2>
<p>If you want to add more commands to the shell script you can do this
easily.  Flask uses <a class="reference external" href="http://click.pocoo.org/">click</a> for the command interface which makes
creating custom commands very easy.  For instance if you want a shell
command to initialize the database you can do this:</p>
<div class="highlight-default"><div class="highlight"><pre><span></span><span class="kn">import</span> <span class="nn">click</span>
<span class="kn">from</span> <span class="nn">flask</span> <span class="k">import</span> <span class="n">Flask</span>

<span class="n">app</span> <span class="o">=</span> <span class="n">Flask</span><span class="p">(</span><span class="vm">__name__</span><span class="p">)</span>

<span class="nd">@app</span><span class="o">.</span><span class="n">cli</span><span class="o">.</span><span class="n">command</span><span class="p">()</span>
<span class="k">def</span> <span class="nf">initdb</span><span class="p">():</span>
    <span class="sd">&quot;&quot;&quot;Initialize the database.&quot;&quot;&quot;</span>
    <span class="n">click</span><span class="o">.</span><span class="n">echo</span><span class="p">(</span><span class="s1">&#39;Init the db&#39;</span><span class="p">)</span>
</pre></div>
</div>
<p>The command will then show up on the command line:</p>
<div class="highlight-default"><div class="highlight"><pre><span></span>$ flask initdb
Init the db
</pre></div>
</div>
</div>
<div class="section" id="application-context">
<h2>Application Context<a class="headerlink" href="#application-context" title="Permalink to this headline">¶</a></h2>
<p>Most commands operate on the application so it makes a lot of sense if
they have the application context setup.  Because of this, if you register
a callback on <code class="docutils literal"><span class="pre">app.cli</span></code> with the <a class="reference internal" href="../api/#flask.cli.AppGroup.command" title="flask.cli.AppGroup.command"><code class="xref py py-meth docutils literal"><span class="pre">command()</span></code></a> the
callback will automatically be wrapped through <a class="reference internal" href="../api/#flask.cli.with_appcontext" title="flask.cli.with_appcontext"><code class="xref py py-func docutils literal"><span class="pre">cli.with_appcontext()</span></code></a>
which informs the cli system to ensure that an application context is set
up.  This behavior is not available if a command is added later with
<code class="xref py py-func docutils literal"><span class="pre">add_command()</span></code> or through other means.</p>
<p>It can also be disabled by passing <code class="docutils literal"><span class="pre">with_appcontext=False</span></code> to the
decorator:</p>
<div class="highlight-default"><div class="highlight"><pre><span></span><span class="nd">@app</span><span class="o">.</span><span class="n">cli</span><span class="o">.</span><span class="n">command</span><span class="p">(</span><span class="n">with_appcontext</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">example</span><span class="p">():</span>
    <span class="k">pass</span>
</pre></div>
</div>
</div>
<div class="section" id="factory-functions">
<h2>Factory Functions<a class="headerlink" href="#factory-functions" title="Permalink to this headline">¶</a></h2>
<p>In case you are using factory functions to create your application (see
<a class="reference internal" href="../patterns/appfactories/#app-factories"><span class="std std-ref">Application Factories</span></a>) you will discover that the <strong class="command">flask</strong> command
cannot work with them directly.  Flask won&#8217;t be able to figure out how to
instantiate your application properly by itself.  Because of this reason
the recommendation is to create a separate file that instantiates
applications.  This is not the only way to make this work.  Another is the
<a class="reference internal" href="#custom-scripts"><span class="std std-ref">Custom Scripts</span></a> support.</p>
<p>For instance if you have a factory function that creates an application
from a filename you could make a separate file that creates such an
application from an environment variable.</p>
<p>This could be a file named <code class="file docutils literal"><span class="pre">autoapp.py</span></code> with these contents:</p>
<div class="highlight-default"><div class="highlight"><pre><span></span><span class="kn">import</span> <span class="nn">os</span>
<span class="kn">from</span> <span class="nn">yourapplication</span> <span class="k">import</span> <span class="n">create_app</span>
<span class="n">app</span> <span class="o">=</span> <span class="n">create_app</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">environ</span><span class="p">[</span><span class="s1">&#39;YOURAPPLICATION_CONFIG&#39;</span><span class="p">])</span>
</pre></div>
</div>
<p>Once this has happened you can make the <strong class="command">flask</strong> command automatically
pick it up:</p>
<div class="highlight-default"><div class="highlight"><pre><span></span><span class="n">export</span> <span class="n">YOURAPPLICATION_CONFIG</span><span class="o">=/</span><span class="n">path</span><span class="o">/</span><span class="n">to</span><span class="o">/</span><span class="n">config</span><span class="o">.</span><span class="n">cfg</span>
<span class="n">export</span> <span class="n">FLASK_APP</span><span class="o">=/</span><span class="n">path</span><span class="o">/</span><span class="n">to</span><span class="o">/</span><span class="n">autoapp</span><span class="o">.</span><span class="n">py</span>
</pre></div>
</div>
<p>From this point onwards <strong class="command">flask</strong> will find your application.</p>
</div>
<div class="section" id="custom-scripts">
<span id="id1"></span><h2>Custom Scripts<a class="headerlink" href="#custom-scripts" title="Permalink to this headline">¶</a></h2>
<p>While the most common way is to use the <strong class="command">flask</strong> command, you can
also make your own &#8220;driver scripts&#8221;.  Since Flask uses click for the
scripts there is no reason you cannot hook these scripts into any click
application.  There is one big caveat and that is, that commands
registered to <a class="reference internal" href="../api/#flask.Flask.cli" title="flask.Flask.cli"><code class="xref py py-attr docutils literal"><span class="pre">Flask.cli</span></code></a> will expect to be (indirectly at least)
launched from a <a class="reference internal" href="../api/#flask.cli.FlaskGroup" title="flask.cli.FlaskGroup"><code class="xref py py-class docutils literal"><span class="pre">flask.cli.FlaskGroup</span></code></a> click group.  This is
necessary so that the commands know which Flask application they have to
work with.</p>
<p>To understand why you might want custom scripts you need to understand how
click finds and executes the Flask application.  If you use the
<strong class="command">flask</strong> script you specify the application to work with on the
command line or environment variable as an import name.  This is simple
but it has some limitations.  Primarily it does not work with application
factory functions (see <a class="reference internal" href="../patterns/appfactories/#app-factories"><span class="std std-ref">Application Factories</span></a>).</p>
<p>With a custom script you don&#8217;t have this problem as you can fully
customize how the application will be created.  This is very useful if you
write reusable applications that you want to ship to users and they should
be presented with a custom management script.</p>
<p>To explain all of this, here is an example <code class="file docutils literal"><span class="pre">manage.py</span></code> script that
manages a hypothetical wiki application.  We will go through the details
afterwards:</p>
<div class="highlight-default"><div class="highlight"><pre><span></span><span class="kn">import</span> <span class="nn">os</span>
<span class="kn">import</span> <span class="nn">click</span>
<span class="kn">from</span> <span class="nn">flask.cli</span> <span class="k">import</span> <span class="n">FlaskGroup</span>

<span class="k">def</span> <span class="nf">create_wiki_app</span><span class="p">(</span><span class="n">info</span><span class="p">):</span>
    <span class="kn">from</span> <span class="nn">yourwiki</span> <span class="k">import</span> <span class="n">create_app</span>
    <span class="k">return</span> <span class="n">create_app</span><span class="p">(</span>
        <span class="n">config</span><span class="o">=</span><span class="n">os</span><span class="o">.</span><span class="n">environ</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;WIKI_CONFIG&#39;</span><span class="p">,</span> <span class="s1">&#39;wikiconfig.py&#39;</span><span class="p">))</span>

<span class="nd">@click</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="bp">cls</span><span class="o">=</span><span class="n">FlaskGroup</span><span class="p">,</span> <span class="n">create_app</span><span class="o">=</span><span class="n">create_wiki_app</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">cli</span><span class="p">():</span>
    <span class="sd">&quot;&quot;&quot;This is a management script for the wiki application.&quot;&quot;&quot;</span>

<span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
    <span class="n">cli</span><span class="p">()</span>
</pre></div>
</div>
<p>That&#8217;s a lot of code for not much, so let&#8217;s go through all parts step by
step.</p>
<ol class="arabic">
<li><p class="first">First we import the <code class="docutils literal"><span class="pre">click</span></code> library as well as the click extensions
from the <code class="docutils literal"><span class="pre">flask.cli</span></code> package.  Primarily we are here interested
in the <a class="reference internal" href="../api/#flask.cli.FlaskGroup" title="flask.cli.FlaskGroup"><code class="xref py py-class docutils literal"><span class="pre">FlaskGroup</span></code></a> click group.</p>
</li>
<li><p class="first">The next thing we do is defining a function that is invoked with the
script info object (<a class="reference internal" href="../api/#flask.cli.ScriptInfo" title="flask.cli.ScriptInfo"><code class="xref py py-class docutils literal"><span class="pre">ScriptInfo</span></code></a>) from Flask and its
purpose is to fully import and create the application.  This can
either directly import an application object or create it (see
<a class="reference internal" href="../patterns/appfactories/#app-factories"><span class="std std-ref">Application Factories</span></a>).  In this case we load the config from an
environment variable.</p>
</li>
<li><p class="first">Next step is to create a <code class="xref py py-class docutils literal"><span class="pre">FlaskGroup</span></code>.  In this case we just
make an empty function with a help doc string that just does nothing
and then pass the <code class="docutils literal"><span class="pre">create_wiki_app</span></code> function as a factory function.</p>
<p>Whenever click now needs to operate on a Flask application it will
call that function with the script info and ask for it to be created.</p>
</li>
<li><p class="first">All is rounded up by invoking the script.</p>
</li>
</ol>
</div>
<div class="section" id="cli-plugins">
<h2>CLI Plugins<a class="headerlink" href="#cli-plugins" title="Permalink to this headline">¶</a></h2>
<p>Flask extensions can always patch the <a class="reference internal" href="../api/#flask.Flask.cli" title="flask.Flask.cli"><code class="xref py py-attr docutils literal"><span class="pre">Flask.cli</span></code></a> instance with more
commands if they want.  However there is a second way to add CLI plugins
to Flask which is through <code class="docutils literal"><span class="pre">setuptools</span></code>.  If you make a Python package that
should export a Flask command line plugin you can ship a <code class="file docutils literal"><span class="pre">setup.py</span></code> file
that declares an entrypoint that points to a click command:</p>
<p>Example <code class="file docutils literal"><span class="pre">setup.py</span></code>:</p>
<div class="highlight-default"><div class="highlight"><pre><span></span><span class="kn">from</span> <span class="nn">setuptools</span> <span class="k">import</span> <span class="n">setup</span>

<span class="n">setup</span><span class="p">(</span>
    <span class="n">name</span><span class="o">=</span><span class="s1">&#39;flask-my-extension&#39;</span><span class="p">,</span>
    <span class="o">...</span>
    <span class="n">entry_points</span><span class="o">=</span><span class="s1">&#39;&#39;&#39;</span>
<span class="s1">        [flask.commands]</span>
<span class="s1">        my-command=mypackage.commands:cli</span>
<span class="s1">    &#39;&#39;&#39;</span><span class="p">,</span>
<span class="p">)</span>
</pre></div>
</div>
<p>Inside <code class="file docutils literal"><span class="pre">mypackage/commands.py</span></code> you can then export a Click object:</p>
<div class="highlight-default"><div class="highlight"><pre><span></span><span class="kn">import</span> <span class="nn">click</span>

<span class="nd">@click</span><span class="o">.</span><span class="n">command</span><span class="p">()</span>
<span class="k">def</span> <span class="nf">cli</span><span class="p">():</span>
    <span class="sd">&quot;&quot;&quot;This is an example command.&quot;&quot;&quot;</span>
</pre></div>
</div>
<p>Once that package is installed in the same virtualenv as Flask itself you
can run <code class="docutils literal"><span class="pre">flask</span> <span class="pre">my-command</span></code> to invoke your command.  This is useful to
provide extra functionality that Flask itself cannot ship.</p>
</div>
</div>


          </div>
        </div>
      </div>

      <div class="sphinxsidebar" role="navigation" aria-label="main navigation">
        <div class="sphinxsidebarwrapper"><p class="logo"><a href="../">
  <img class="logo" src="../_static/flask.png" alt="Logo"/>
</a></p>
  <h3><a href="../">Table Of Contents</a></h3>
  <ul>
<li><a class="reference internal" href="#">Command Line Interface</a><ul>
<li><a class="reference internal" href="#basic-usage">Basic Usage</a></li>
<li><a class="reference internal" href="#virtualenv-integration">Virtualenv Integration</a></li>
<li><a class="reference internal" href="#debug-flag">Debug Flag</a></li>
<li><a class="reference internal" href="#running-a-shell">Running a Shell</a></li>
<li><a class="reference internal" href="#custom-commands">Custom Commands</a></li>
<li><a class="reference internal" href="#application-context">Application Context</a></li>
<li><a class="reference internal" href="#factory-functions">Factory Functions</a></li>
<li><a class="reference internal" href="#custom-scripts">Custom Scripts</a></li>
<li><a class="reference internal" href="#cli-plugins">CLI Plugins</a></li>
</ul>
</li>
</ul>
<h3>Versions</h3>
<ul class="versions">
  
    
      
        
      
      <li><a href="../../dev/cli/">Development</a>
    
    <span class=note>(unstable)</span>
  
    
      <li><a href="." class="current">Flask 0.12.x</a>
    
    <span class=note>(stable)</span>
  
    
      
        
      
      <li><a href="../../0.11/cli/">Flask 0.11.x</a>
    
    
  
    
      
        
      
      <li><a href="../../0.10/cli/">Flask 0.10.x</a>
    
    
  
</ul>
<div class="carbon_ads">
  <script async type="text/javascript" src="//cdn.carbonads.com/carbon.js?zoneid=1673&serve=C6AILKT&placement=pocooorg" id="_carbonads_js"></script>
</div><h3>Related Topics</h3>
<ul>
  <li><a href="../">Documentation overview</a><ul>
      <li>Previous: <a href="../extensions/" title="previous chapter">Flask Extensions</a></li>
      <li>Next: <a href="../server/" title="next chapter">Development Server</a></li>
  </ul></li>
</ul>
<div id="searchbox">
  <h3>Quick search</h3>
    <form class="search" action="../search/" method="get">
      <input type="text" name="q" />
      <input type="submit" value="Go" />
    </form>
</div>
        </div>
      </div>
      <div class="clearer"></div>
    </div>
    <div class="footer">
      &copy; Copyright 2010 - 2017, Armin Ronacher.
      Created using <a href="http://sphinx.pocoo.org/">Sphinx</a>.
    </div>
  
  </body>
</html>